// Block 類別
    static class Block {
        int x, y, width, height;
        Image image;
        boolean isDestroyed = false;

        // 建構子，傳入圖片路徑來載入圖片
        public Block(int x, int y, int width, int height, Image image) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
            this.image = image;
        }

        public void draw(Graphics g) {
            if (!isDestroyed) {
                g.drawImage(image, x, y, width, height, null);
            }
        }

        public Rectangle getBounds() {
            return new Rectangle(x, y, width, height);
        }

        public void destroy() {
            isDestroyed = true;
        }
    }

    // Structure 類別
    static class Structure {
        List<Block> blocks = new ArrayList<>(); // 使用泛型指定 List 存儲 Block 物件

        public Structure() {
            // 加入豬和建築塊
            loadStructure("src/structure.txt"); // 加載結構
        }

        // 加載結構的方法
        public void loadStructure(String filePath) {
            try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
                String line;
                while ((line = br.readLine()) != null) {
                    String[] parts = line.split(" ");
                    String type = parts[0];
                    int x = Integer.parseInt(parts[1]);
                    int y = Integer.parseInt(parts[2]);
                    int width = Integer.parseInt(parts[3]);
                    int height = Integer.parseInt(parts[4]);

                    Image image = null;
                    if (type.equals("pig")) {
                        image = new ImageIcon("src/img/pig.png").getImage();
                    } else if (type.equals("wood")) {
                        image = new ImageIcon("src/img/wood.png").getImage();
                    }
                    blocks.add(new Block(x, y, width, height, image));
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        public void draw(Graphics g) {
            for (Block block : blocks) {
                block.draw(g);
            }
        }

        public void checkCollision(Rectangle birdBounds) {
            for (Block block : blocks) {
                if (!block.isDestroyed && birdBounds.intersects(block.getBounds())) {
                    block.destroy();
                }
            }
        }
    }