import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.util.ArrayList;
import javax.swing.*;


public class AngryBird {
    static JFrame frm = new JFrame("憤怒鳥");
    static int ballX = 120, ballY = 1160; // 小鳥的初始位置
    static int ballVelocityX = 0, ballVelocityY = 0; // 小鳥的初速度
    static int enemyX = 1800, enemyY = 1160; // 敵人初始位置
    static Enemy enemy = new Enemy(enemyX, enemyY); // 初始化敵人
    static ArrayList<WoodBlock> woodBlocks = new ArrayList<>(); // 木塊集合
    static JPanel pne = new JPanel() {
        Image bgImage = new ImageIcon("src/img/BG.jpg").getImage();
        Image ballImage = new ImageIcon("src/img/RedBird.png").getImage();
        int offsetX, offsetY; // 滑鼠拖曳偏移量
        boolean dragging = false;

        {
            // 滑鼠事件
            addMouseListener(new MouseAdapter() {
                @Override
                public void mousePressed(MouseEvent e) {
                    double scaleX = (double) getWidth() / 2560;
                    double scaleY = (double) getHeight() / 1440;
                    int scaledBallX = (int) (ballX * scaleX);
                    int scaledBallY = (int) (ballY * scaleY);

                    // 判斷是否點擊在小鳥內部
                    if (e.getX() >= scaledBallX && e.getX() <= scaledBallX + 32 &&
                        e.getY() >= scaledBallY && e.getY() <= scaledBallY + 32) {
                        dragging = true;
                        offsetX = e.getX() - scaledBallX;
                        offsetY = e.getY() - scaledBallY;
                    }
                }

                @Override
                public void mouseReleased(MouseEvent e) {
                    if (dragging) {
                        double scaleX = (double) getWidth() / 2560;
                        double scaleY = (double) getHeight() / 1440;

                        // 計算小鳥的初速度
                        ballVelocityX = (int) ((e.getX() - offsetX) * 0.3);
                        ballVelocityY = (int) ((e.getY() - offsetY) * 0.3);
                    }
                    dragging = false;
                }
            });

            addMouseMotionListener(new MouseMotionAdapter() {
                @Override
                public void mouseDragged(MouseEvent e) {
                    if (dragging) {
                        double scaleX = (double) getWidth() / 2560;
                        double scaleY = (double) getHeight() / 1440;

                        ballX = (int) ((e.getX() - offsetX) / scaleX);
                        ballY = (int) ((e.getY() - offsetY) / scaleY);
                        repaint();
                    }
                }
            });
        }

        // 更新木塊位置
        private void updateWoodBlocks() {
            for (WoodBlock block : woodBlocks) {
                block.update();
            }
        }

        // 檢查小鳥與木塊、豬的碰撞
        private void checkCollision() {
            Rectangle birdRect = new Rectangle(ballX, ballY, 32, 32);
            Rectangle enemyRect = new Rectangle(enemy.x, enemy.y, 32, 32);

            // 小鳥碰撞豬
            if (birdRect.intersects(enemyRect)) {
                enemy.setState(1); // 豬被擊中，切換到煙霧狀態
            }

            // 小鳥與木塊碰撞
            for (WoodBlock block : woodBlocks) {
                if (block.getBounds().intersects(birdRect)) {
                    block.applyForce(ballVelocityX, ballVelocityY); // 木塊受力
                }
            }
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            g.drawImage(bgImage, 0, 0, getWidth(), getHeight(), this);

            double scaleX = (double) getWidth() / 2560;
            double scaleY = (double) getHeight() / 1440;

            // 繪製敵人（豬）
            enemy.draw(g, scaleX, scaleY);

            // 繪製木塊
            for (WoodBlock block : woodBlocks) {
                block.draw(g, scaleX, scaleY);
            }

            // 繪製小鳥
            int scaledBallX = (int) (ballX * scaleX);
            int scaledBallY = (int) (ballY * scaleY);
            g.drawImage(ballImage, scaledBallX, scaledBallY, 32, 32, this);
        }

        // 更新遊戲狀態
        public void update() {
            // 更新小鳥的運動
            ballX += ballVelocityX;
            ballY += ballVelocityY;
            ballVelocityY += 1; // 模擬重力

            // 更新木塊
            updateWoodBlocks();

            // 檢查碰撞
            checkCollision();
        }
    };

    static JButton btn = new JButton("重置");

    public static void main(String[] args) {
        pne.setLayout(null);
        btn.setBounds(10, 10, 80, 30); // 按鈕位置
        pne.add(btn);

        // 重置按鈕功能
        btn.addActionListener(e -> {
            ballX = 120;
            ballY = 1160;
            ballVelocityX = 0;
            ballVelocityY = 0;
            enemy.reset(); // 重置敵人
            woodBlocks.clear();
            initWoodBlocks(); // 重置木塊
            pne.repaint();
        });

        frm.add(pne);
        frm.setSize(800, 600);
        frm.setVisible(true);
        frm.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    // 木塊類別（模擬木板）
    static class WoodBlock {
        int x, y, width, height;
        int velocityX = 0, velocityY = 0;

        public WoodBlock(int x, int y, int width, int height) {
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }

        public void applyForce(int forceX, int forceY) {
            // 當木塊受到力的時候，更新速度
            this.velocityX += forceX / 10;
            this.velocityY += forceY / 10;
        }

        public void update() {
            // 更新木塊的位置
            x += velocityX;
            y += velocityY;

            // 模擬重力
            velocityY += 1;
        }

        public void draw(Graphics g, double scaleX, double scaleY) {
            g.setColor(Color.BLACK);
            g.fillRect((int) (x * scaleX), (int) (y * scaleY), width, height);
        }

        public Rectangle getBounds() {
            return new Rectangle(x, y, width, height);
        }
    }

    // 豬的類別
    static class Enemy {
        int x, y;
        int state; // 0: 正常, 1: 煙霧, 2: 消失
        Image enemyImage, smokeImage;

        public Enemy(int x, int y) {
            this.x = x;
            this.y = y;
            this.state = 0; // 初始狀態為正常
            this.enemyImage = new ImageIcon("src/img/pig.png").getImage();
            this.smokeImage = new ImageIcon("src/img/cloud1.png").getImage();
        }

        public void setState(int state) {
            this.state = state;
        }

        public void reset() {
            this.state = 0;
            this.x = 1800;
            this.y = 1160;
        }

        public void draw(Graphics g, double scaleX, double scaleY) {
            int scaledX = (int) (x * scaleX);
            int scaledY = (int) (y * scaleY);

            if (state == 0) {
                g.drawImage(enemyImage, scaledX, scaledY, 32, 32, null); // 正常顯示
            } else if (state == 1) {
                g.drawImage(smokeImage, scaledX, scaledY, 32, 32, null); // 煙霧顯示
            }
        }
    }

    // 將 initWoodBlocks 方法移到 AngryBird 類別中
    public static void initWoodBlocks() {
        // 清空原來的木塊列表
        woodBlocks.clear();

        // 創建並加入新的木塊
        woodBlocks.add(new WoodBlock(200, 1160, 50, 20));
        woodBlocks.add(new WoodBlock(250, 1160, 50, 20));
        woodBlocks.add(new WoodBlock(300, 1160, 50, 20));
    }
}
